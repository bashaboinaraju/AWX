---
- name: Perform SQL Server Health Checks
  hosts: all
  gather_facts: no
  vars:
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"
  tasks:
    - name: Check Disk Space
      win_shell: |
        Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, VolumeName, FreeSpace, Size | ConvertTo-Json -Depth 3
      register: disk_space
      ignore_errors: yes
    
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ inventory_hostname }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes

    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ inventory_hostname }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress -Depth 3
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes

    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ inventory_hostname }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes

    - name: Check SQL Server Logs for Errors
      win_shell: |
        try {
          $query = "EXEC xp_readerrorlog 0, 1, 'Error';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ inventory_hostname }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_logs
      ignore_errors: yes

    - name: Get SQL Agent Job Status
      win_shell: |
        try {
          $query = "SELECT name, enabled FROM msdb.dbo.sysjobs;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ inventory_hostname }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: sql_jobs
      ignore_errors: yes

    - name: Display Health Check Results
      debug:
        msg: |
          ðŸ–¥ Disk Space:
          {{ disk_space.stdout }}
          ðŸ“Š Database Space Utilization:
          {{ db_space.stdout }}
          ðŸ©º Database Health:
          {{ db_health.stdout }}
          ðŸš¨ Deadlocks:
          {{ deadlocks.stdout }}
          ðŸ“œ SQL Server Logs:
          {{ sql_logs.stdout }}
          ðŸ”„ SQL Agent Jobs:
          {{ sql_jobs.stdout }}
