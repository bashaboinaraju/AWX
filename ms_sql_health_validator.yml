---
- name: SQL Server Health Check and Maintenance
  hosts: 10.112.0.10
  gather_facts: no
  vars:
    sql_instance: "10.112.0.10"
    sql_user: "{{ sql_user }}"
    sql_password: "{{ sql_password }}"
  tasks:
    - name: Get Disk Space Utilization
      win_shell: |
        Get-WmiObject Win32_LogicalDisk | Select-Object DeviceID, VolumeName, Size, FreeSpace | ConvertTo-Json
      register: disk_space
      ignore_errors: yes
    
    - name: Get Database Space Utilization
      win_shell: |
        try {
          $query = "SELECT DB_NAME(database_id) AS DatabaseName, SUM(size * 8) / 1024 AS SizeMB FROM sys.master_files GROUP BY database_id;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_space
      ignore_errors: yes
    
    - name: Get Database Health
      win_shell: |
        try {
          $query = "SELECT db.name AS DatabaseName, db.state_desc AS Status, (SELECT COUNT(*) FROM sys.dm_exec_requests r WHERE r.database_id = db.database_id) AS ActiveRequests, (SELECT COUNT(*) FROM sys.dm_exec_sessions s WHERE s.is_user_process = 1 AND s.database_id = db.database_id) AS ActiveUserConnections FROM sys.databases db;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: db_health
      ignore_errors: yes
    
    - name: Check for Deadlocks
      win_shell: |
        try {
          $query = "SELECT COUNT(*) AS Deadlocks FROM sys.dm_tran_locks WHERE request_status = 'WAIT';"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[{"Deadlocks": 0}]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Deadlocks": "Error"}]'
        }
      register: deadlocks
      ignore_errors: yes
    
    - name: Get SQL Agent Job Activities
      win_shell: |
        try {
          $query = "SELECT j.name, j.enabled, MAX(h.run_status) AS last_run_status FROM msdb.dbo.sysjobs j LEFT JOIN msdb.dbo.sysjobhistory h ON j.job_id = h.job_id WHERE h.step_id = 0 GROUP BY j.name, j.enabled;"
          $result = Invoke-Sqlcmd -Query "$query" -ServerInstance "{{ sql_instance }}" -Username "{{ sql_user }}" -Password "{{ sql_password }}" -TrustServerCertificate | ConvertTo-Json -Compress
          if (-not $result) { Write-Output '[]' } else { Write-Output $result }
        } catch {
          Write-Output '[{"Error": "' + $_.Exception.Message + '"}]'
        }
      register: job_activities
      ignore_errors: yes
    
    - name: Verify SQL Server Logs
      win_shell: |
        Get-Content "C:\Program Files\Microsoft SQL Server\MSSQL*.MSSQLSERVER\MSSQL\Log\ERRORLOG" -Tail 50 | ConvertTo-Json
      register: sql_logs
      ignore_errors: yes
    
    # - name: Convert Outputs to JSON
    #   set_fact:
    #     disk_space_fact: "{{ (disk_space.stdout | from_json) if disk_space.stdout is not none else [] }}"
    #     db_space_fact: "{{ (db_space.stdout | from_json) if db_space.stdout is not none else [] }}"
    #     db_health_fact: "{{ (db_health.stdout | from_json) if db_health.stdout is not none else [] }}"
    #     deadlocks_fact: "{{ (deadlocks.stdout | from_json) if deadlocks.stdout is not none else {'Deadlocks': 0} }}"
    #     job_activities_fact: "{{ (job_activities.stdout | from_json) if job_activities.stdout is not none else [] }}"
    #     sql_logs_fact: "{{ sql_logs.stdout_lines | default([]) }}"
    
    - name: Display Formatted Results
      debug:
        msg: |
          ğŸ’¾ Disk Space:
          {% for item in disk_space_fact %}
            - Volume: {{ item.DeviceID }} | Free Space: {{ (item.FreeSpace | int / 1073741824) | round(2) }} GB
          {% endfor %}
          ğŸ“Š Database Space:
          {% for item in db_space_fact if item.DatabaseName is defined and item.SizeMB is defined %}
            - {{ item.DatabaseName }}: {{ item.SizeMB }} MB
          {% endfor %}
          ğŸš¨ Deadlocks:
          {% if (deadlocks_fact.Deadlocks | default(0) | int) > 0 %}
            - {{ deadlocks_fact.Deadlocks }} deadlocks detected!
          {% else %}
            - No deadlocks detected
          {% endif %}
          ğŸ›  SQL Server Agent Jobs:
          {% for item in job_activities_fact if item.name is defined and item.enabled is defined and item.last_run_status is defined %}
            - Job: {{ item.name }} | Enabled: {{ item.enabled }} | Last Outcome: {{ item.last_run_status }}
          {% endfor %}
          ğŸ©º Database Health:
          {% for item in db_health_fact %}
            - Database: {{ item.DatabaseName }} | Status: {{ item.Status }} | Active Requests: {{ item.ActiveRequests }}
          {% endfor %}
          ğŸ“œ SQL Logs (last 50 lines):
          {% for line in sql_logs_fact %}
            - {{ line }}
          {% endfor %}
